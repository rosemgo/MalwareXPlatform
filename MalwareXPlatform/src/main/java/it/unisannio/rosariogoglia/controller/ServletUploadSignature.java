package it.unisannio.rosariogoglia.controller;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.log4j.Logger;
import org.json.JSONException;
import org.json.JSONObject;

import it.unisannio.rosariogoglia.dao.MalwareSignatureDAO;
import it.unisannio.rosariogoglia.model.MalwareSignature;

/**
 * Servlet implementation class ServletUploadSignature
 */
@WebServlet("/ServletUploadSignature")
public class ServletUploadSignature extends HttpServlet {
	private static final long serialVersionUID = 1L;
      
	Logger logger = Logger.getLogger(ServletUploadExploit.class); 
	
    /**
     * @see HttpServlet#HttpServlet()
     */
    public ServletUploadSignature() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {


		String nomeCampoForm = "";
		String valoreCampoForm = "";
		String nomeFile = ""; //indica il path+nome del file caricato
		String nameSignature = null; //indica il nome dell'exploit scelto dall'utente
		String messaggio = "";
		File fin = null;
		MalwareSignature fileSignature = null;
		boolean prosegui = false;
		
		//FARE IL CONTROLLO SULL'OPERAZIONE: SE VIENE CARICATO L'EXPLOIT O LA SINGATURE
		System.out.println("IN ServletUploadFile");
         
        
        /* Analizzo la richiesta per definirne il contentType */
		boolean isMultipart = ServletFileUpload.isMultipartContent(request);
		
		logger.debug("multipart è: " +isMultipart);
        
        
		/* Verifico che il type della richiesta sia MULTIPART/FORM-DATA */
		if(isMultipart){
			
			
		/*	try {
				List multiparts = new ServletFileUpload(new DiskFileItemFactory()).parseRequest(request);
			    System.out.println("MULTIPARTS SIZE: " + multiparts.size());
			} catch (FileUploadException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		*/	
			logger.debug("è  multipart");
			
			/* 
			 * Definisco un factory di tipo Disk per la creazione di oggetti FileItem
			 * Tale factory mantiene in memoria i FileItem di dimensioni minori di 10KB, per FileItem più grandi li memorizza nella directory temporanea del sistema.
			 */
			DiskFileItemFactory factory = new DiskFileItemFactory();
			/* L'oggetto upload permette di analizzare la richiesta e elaborare l'elenco di elementi dell'applicazione */
			ServletFileUpload upload = new ServletFileUpload(factory);	
				
			try {
				/* Analizzo la richiesta e elaboro la lista di elementi in essa contenuti */
				List<FileItem> itemList = upload.parseRequest(request);
				
				logger.debug("creiamo la lista item");
				
				System.out.println("size item: " + itemList.size());
				
				for(int i=0; i<itemList.size(); i++){
					FileItem item = itemList.get(i);
					
					logger.debug("scorriamo ogni elemento");
										
					/* 
					 * Verifico se il FileItem corrente è un campo di un FORM html oppure è un elemento diverso:
					 * Se è un campo FORM prelevo le proprietà nome e valore del campo;
					 * altrimenti gestisco l'elemento file scrivendone il contenuto nella directory specificata.
					 */
					if(item.isFormField()){
						
						
						logger.debug("è un FORM FIELD");
						
						nomeCampoForm = item.getFieldName(); //corrispondente all'attributo name=" " del form
						valoreCampoForm = item.getString(); //corrispondente al valore inserito dall' utente nel form
							
						
						System.out.println("NOME CAMPO FORM: " + nomeCampoForm);
						System.out.println("VALORE CAMPO FORM: " + valoreCampoForm);
						
						if(nomeCampoForm.equals("signaturename")) {
							
							nameSignature = valoreCampoForm;
							System.out.println("nome: "+ nameSignature);
							
						}
						
					}
					else{
						
						logger.debug("E' UN FILE");
						
						nomeFile = item.getName(); //corrispondente al nome del File
						
						logger.debug("nome file: " + nomeFile);
						
						long dimensioneInBytes = item.getSize(); //corrispondente alla dimensione del File		
						
						logger.debug("dimensione file: " + dimensioneInBytes);
													
						logger.debug("Creo un nuovo file nella directory specificata con il nome del file inserito nel form ");
						
						//CREO LA CARTELLA sign SE NON ESISTE
						File directory = new File(getServletContext().getRealPath("/sign/"));
				        // Verifica se la cartella esiste già
				        if (!directory.exists()) {
				            // Creazione della cartella
				            boolean success = directory.mkdirs();
				            
				            if (success) {
				                System.out.println("Cartella sign creata con successo.");
				            } else {
				                System.out.println("Impossibile creare la cartella sign.");
				            }
				        } else {
				            System.out.println("La cartella sign esiste già.");
				        }

						//salvo i file signature nella cartella sign
						fin=new File(getServletContext().getRealPath("/sign/"), nomeFile); 
					
						
						try {
							//*******************
							//CONTROLLARE IL FORMATO DEL FILE E DECIDERE SE ACCETTARE SOLO EXE O ANCHE .TXT
													
							//IL FILE VIENE SCRITTO NEL FYLESYSTEM LOCALE
							item.write(fin); //serve per salvare il file nella cartella immagini/inserzioni dell'app deployata in tomcat

							
							String pathFile = "sign/"+nomeFile;
								
							//CREARE L'ELEMENTO EXPLOIT MODEL IN MODO DA POTERLO POI INSERIRE NEL DB
							fileSignature = new MalwareSignature();
							fileSignature.setSignature(nameSignature);
							fileSignature.setPathFile(pathFile);
							fileSignature.setFileEXE(fin); //INSERISCO ANCHE IL FILE BINARIO
															
							prosegui=true;
								
						}catch (Exception e) {
								logger.error(e);
							    logger.warn(new Date()+" Scrittura file "+nomeFile+" non eseguita correttamente !!!");
								messaggio="Errore inserimento file Exploit!!!";
								prosegui=false;
						}				
					}
				}
				
				
				
			} catch (FileUploadException e) {
				logger.warn(new Date()+" Inserimento file Signature non eseguito correttamente !!!");
				messaggio="Errore inserimenro file !!!";
				prosegui=false;
			} catch (Exception e) {
				
				e.printStackTrace();
			}	
						
		}
		
		boolean resultF = false;
		
	//	SE prosegui è TRUE ALLORA FACCIO L'INSERIMENTO DEL FILE NEL DATABASE CREANDO L'OGGETTO EXPLOIT
		if(prosegui) {
								
			int idSignature = -1;
			MalwareSignatureDAO msDAO = new MalwareSignatureDAO();
			idSignature = msDAO.insertMalwareSignature(fileSignature);	
						
			if(idSignature != -1) {
				
				//messaggio = "Signature n° "+ fileSignature.getIdSignature() + " - " + fileSignature.getPathFile().replace("\\", "\\\\") + " creato correttamente!";
				messaggio = "Signature n° "+ fileSignature.getIdSignature() + " - " + fileSignature.getPathFile() + " creato correttamente!";
				logger.info(new Date()+" "+messaggio);
				resultF = true;	
			}
			else {
				messaggio = "Signature " + fileSignature.getSignature() + "non creato correttamente!";
				logger.info(new Date()+" "+messaggio);
				resultF = false;
			}		
			
		}
		
		
		String result = "{\"result\":"+resultF+",\"messaggio\":\"" +messaggio+ "\",\"redirect_url\":\"dashboard.html\"}";
		
		    	
    	System.out.println("result: " + result);
    		
    	JSONObject m = null;
    	try {
    		m = new JSONObject(result);
    		System.out.println("mess: " +m.toString());
    	} catch (JSONException e) {
    		e.printStackTrace();
    	}
    		
    	System.out.println("invio: " + m.toString());
    		
    	response.setContentType("text/plain");
    	response.setCharacterEncoding("UTF-8");
    	response.getWriter().write(m.toString());	
    }


	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
