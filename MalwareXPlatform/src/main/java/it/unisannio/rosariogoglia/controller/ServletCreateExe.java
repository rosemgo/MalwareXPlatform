package it.unisannio.rosariogoglia.controller;

import java.io.IOException;

import java.io.File;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.FileUtils;
import org.apache.tomcat.util.http.fileupload.IOUtils;
import org.json.JSONException;
import org.json.JSONObject;

import it.unisannio.rosariogoglia.dao.ExploitDAO;
import it.unisannio.rosariogoglia.dao.MalwareSignatureDAO;
import it.unisannio.rosariogoglia.model.Exploit;
import it.unisannio.rosariogoglia.model.MalwareSignature;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * Servlet implementation class ServletCreateExe
 */
@WebServlet("/ServletCreateExe")
public class ServletCreateExe extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public ServletCreateExe() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		//RICEVERE IN INPUT IL NOME DEI 2 FILE.EXE DA UNIRE CHE DEVONO RISIEDERE NELLA CARTELLA WEB DELL APP
		System.out.println("SONO IN CREATE EXE");
		
		
		//RICEVO L'ID DELL'EXPLOIT SCELTO
		String idExploitString = request.getParameter("exploit");
		Integer idExploit = null;
		if(!idExploitString.equals("Select Exploit")) {
			idExploit = Integer.parseInt(idExploitString);
		}
		System.out.println("ID EXPLOIT SCELTO: " + idExploit);
		
		//RICEVO L'ID DELLA SIGNATURE SCELTA
		String idSignatureString = request.getParameter("signature");
		Integer idSignature = null;
		if(!idSignatureString.equals("Select Signature")) {
			idSignature = Integer.parseInt(idSignatureString);
		}		
		System.out.println("ID SIGNATURE SCELTO: " + idSignature);
		
		
		//**************
		//SE NON SONO STATI SCELTI GLI ID, GESTIRE LA COSA INVIANDO UN MESSAGGIO DI ERRORE
		
		
		
		//CON L'OGGETTO DAO, PRELEVIAMO DAL DB GLI OGGETTI EXPLOIT E SIGNATURE DA UNIRE
		ExploitDAO eDAO = new ExploitDAO();
		MalwareSignatureDAO msDAO = new MalwareSignatureDAO();
		
		//CARICO DAL DB SIA L'EXPLOIT SCELTO CHE LA SIGNATURE
		Exploit exploit = eDAO.getExploitById(idExploit);
		MalwareSignature signature = msDAO.getMalwareSignatureById(idSignature);
		
		
		//PRELEVO IL PATH DEI FILE
		String signaturePath = signature.getPathFile();
		//IL PAYLOAD DEVE SEMPRE ESSERE LA VULNERABILITA'
		String exploitPath = exploit.getPathFile();
		
		System.out.println("signaturePath: " + signaturePath);
		System.out.println("exploitPath: " + exploitPath);

		
		ServletContext ctx = getServletConfig().getServletContext();
		String fullPath = ctx.getRealPath("");
		
		System.out.println(fullPath + "injector.py");
		
		System.out.println();
		
		//**********
		//BISGONA CONTROLLARE SE IL FILE è PRESENTE NELLA CARTELLA WEBAPP, SE NON è PRESENTE BISOGNA CREARLO
		//QUINDI CARICARLO NELL OGGETTO MODEL EXPLOIT E SIGNATURE E POI CREARLO NEL fullPath
		File fileExploit = null;
		File fileSignature = null;
		try {
		    
	        fileExploit = new File(getServletContext().getRealPath(""), exploit.getPathFile());
	        if (fileExploit.exists())
	            System.out.println("Il file " + exploit.getPathFile() + " esiste");
	        else if(fileExploit.createNewFile()) {
	        	System.out.println(exploit.getFileEXE());
	        	
	        	//CARICARE IL FILE DAL DATABASE
	        	exploit = eDAO.getExploitByIdWithFile(idExploit, fileExploit);  	
	        	
	        	//FileUtils.copyFile(exploit.getFileEXE(), fileExploit);
	        	System.out.println("Il file " + exploit.getPathFile() + " è stato creato");
	        }
	        else
	            System.out.println("Il file " + exploit.getPathFile()  + " non può essere creato");
	        
	        fileSignature = new File(getServletContext().getRealPath(""),signature.getPathFile());
	        if (fileSignature.exists())
	            System.out.println("Il file " + signature.getPathFile() + " esiste");
	        else if(fileSignature.createNewFile()) {
	        	
	        	//CARICARE IL FILE DAL DATABASE
	        	signature = msDAO.getSignatureByIdWithFile(idSignature, fileSignature);  	
	        	
	        	System.out.println("Il file " + signature.getPathFile() + " è stato creato");
	        }
	        else
	            System.out.println("Il file " + signature.getPathFile()  + " non può essere creato");
	        
	        
		} catch (IOException e) {
	        e.printStackTrace();
	    }  
	             
		String target = "";
		String payload = "";
		
		//VERIFICARE IL TIPO DI FILE
		if(signaturePath.contains(".txt")) {
			payload = signaturePath;
			target = exploitPath;		
		}
		else {
			payload = exploitPath;
			target = signaturePath;
		}
		
		
		System.out.println("STO PER LANCIARE PYTHON:");
		
		String command = "python "+ fullPath + "injector.py -t "+ fullPath + target + " -p " + fullPath + payload;
		
		String command3 = "python "+ fullPath + "injector.py -t "+ fullPath + "marcopollo3.exe -p " + fullPath +"zzz_exploit_FINAL3.exe ";
		
		//FUNZIONA E CREA IL MOD.EXE IN WEBAPP
		//String command = "python C:\\Users\\rosar\\git\\MalwareXPlatform\\MalwareXPlatform\\src\\main\\webapp\\injector.py -p C:\\Users\\rosar\\git\\MalwareXPlatform\\MalwareXPlatform\\src\\main\\webapp\\zzz_exploit_FINAL3.exe -t C:\\Users\\rosar\\git\\MalwareXPlatform\\MalwareXPlatform\\src\\main\\webapp\\marcopollo3.exe" ;
			
		//String command = "python C:\\Users\\rosar\\workspaceEsercitazioniASSD\\TestPython\\injector.py -t C:\\Users\\rosar\\workspaceEsercitazioniASSD\\TestPython\\marcopollo3.exe -p C:\\Users\\rosar\\workspaceEsercitazioniASSD\\TestPython\\zzz_exploit_FINAL3.exe";
		System.out.println("command: " + command);
		
		Process p = Runtime.getRuntime().exec(command);
		System.out.println(p.toString());
		//IL FILE EXE VIENE CREATO IN webapp
	    while(p.isAlive()) {
	    	//System.out.println("INJECTOR.PY E' ANCORA IN ESECUZIONE");
	    }	
		
		
		/*	BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
		String ret = in.readLine();
		System.out.println("value is : "+ret);
		
		System.out.println(p);
		// ProcessBuilder pb = new ProcessBuilder("python","test1.py",""+number1,""+number2);
		// Process p = pb.start();
	*/	
		
		//DOPO AVER CREATO L'EXE POSSO ANCHE CANCELLARE I FILE INSERITI FISICAMENTE NELLA CARTELLA WEBAPP
		
		
		// INVIARE ALLA SERVLET L'URL DELLA RISORSA CREATA
     	String url = target.replace(".exe", "") + "_mod.exe";
     	     	
     	
	/*	String urlEXE = getServletContext().getRealPath(""+url);
		System.out.println("url finale: " + urlEXE);
		String urlfinal = urlEXE.replaceAll("\\\\", ""
				+ "\\\\\\\\");
		System.out.println("url finale: " + urlfinal);
	*/	
     	
     	//GESTIRE MESSAGGI DI ERRORE
     	String messaggio = "File EXE creato! Il download si avvierà tra qualche istante";
		String result = "{\"result\":true,\"url\":\""+ url +"\",\"messaggio\":\"" +messaggio+ "\"}";
		
		System.out.println("result: " + result);
		
		JSONObject m = null;
		try {
			 m = new JSONObject(result);
			System.out.println("mess: " +m.toString());
		} catch (JSONException e) {
			e.printStackTrace();
		}
		
		System.out.println("invio: " + m.toString());
		
		response.setContentType("text/plain");
		response.setCharacterEncoding("UTF-8");
		response.getWriter().write(m.toString());
		
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
