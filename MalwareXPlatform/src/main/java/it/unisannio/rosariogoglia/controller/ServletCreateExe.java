package it.unisannio.rosariogoglia.controller;

import java.io.IOException;

import java.io.File;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.FileUtils;
import org.apache.tomcat.util.http.fileupload.IOUtils;
import org.json.JSONException;
import org.json.JSONObject;

import it.unisannio.rosariogoglia.dao.ExploitDAO;
import it.unisannio.rosariogoglia.dao.MalwareSignatureDAO;
import it.unisannio.rosariogoglia.model.Exploit;
import it.unisannio.rosariogoglia.model.MalwareSignature;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

/**
 * Servlet implementation class ServletCreateExe
 */
@WebServlet("/ServletCreateExe")
public class ServletCreateExe extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public ServletCreateExe() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		//RICEVERE IN INPUT IL NOME DEI 2 FILE.EXE DA UNIRE CHE DEVONO RISIEDERE NELLA CARTELLA WEB DELL APP
		System.out.println("SONO IN CREATE EXE");
		
		
		//RICEVO L'ID DELL'EXPLOIT SCELTO
		String idExploitString = request.getParameter("exploit");
		Integer idExploit = null;
		if(!idExploitString.equals("Select Exploit")) {
			idExploit = Integer.parseInt(idExploitString);
		}
		System.out.println("ID EXPLOIT SCELTO: " + idExploit);
		
		//RICEVO L'ID DELLA SIGNATURE SCELTA
		String idSignatureString = request.getParameter("signature");
		Integer idSignature = null;
		if(!idSignatureString.equals("Select Signature")) {
			idSignature = Integer.parseInt(idSignatureString);
		}		
		System.out.println("ID SIGNATURE SCELTO: " + idSignature);
		
		
		//**************
		//SE NON SONO STATI SCELTI GLI ID, GESTIRE LA COSA INVIANDO UN MESSAGGIO DI ERRORE
		
		
		
		//CON L'OGGETTO DAO, PRELEVIAMO DAL DB GLI OGGETTI EXPLOIT E SIGNATURE DA UNIRE
		ExploitDAO eDAO = new ExploitDAO();
		MalwareSignatureDAO msDAO = new MalwareSignatureDAO();
		
		//CARICO DAL DB SIA L'EXPLOIT SCELTO CHE LA SIGNATURE
		Exploit exploit = eDAO.getExploitById(idExploit);
		MalwareSignature signature = msDAO.getMalwareSignatureById(idSignature);
		
		
		//PRELEVO IL PATH DEI FILE
		String signaturePath = signature.getPathFile();		
		String exploitPath = exploit.getPathFile();
		
		System.out.println("signaturePath: " + signaturePath);
		System.out.println("exploitPath: " + exploitPath);

		
		ServletContext ctx = getServletConfig().getServletContext();
		String fullPath = ctx.getRealPath("");
		
		System.out.println(fullPath + "injectToExe.py");
		
		System.out.println();
		
		//**********
		//E' NECESSARIO CHE I FILE EXPLOIT E SIGNATURE SIANO PRESENTI NEL FILE SYSTEM PER PERMETTERE ALLO SCRIPT PYTHON DI TROVARLI E FARE L'INJECTION
		
		//BISGONA CONTROLLARE SE I FILE EXPLOIT E SIGNATURE SONO PRESENTI NELLA CARTELLA WEBAPP, SE NON è PRESENTE BISOGNA CREARLO
		//QUINDI CARICARLO NELL OGGETTO MODEL EXPLOIT E SIGNATURE E POI CREARLO NEL fullPath
		
		File fileExploit = null;
		File fileSignature = null;
		String nameFileExploit = "";
		String nameFileSignature = "";
		try {
		    			
			System.out.println("indice: " + exploit.getPathFile().lastIndexOf("/"));
			
			//*** LAVORA SUL FILE EXPLOIT
			
			//CREO LA CARTELLA dist SE NON ESISTE. NELLA CARTELLA dist SONO CARICATI I FILE EXE IN CUI FARE L'INIEZIONE
			File directory = new File(getServletContext().getRealPath("/dist/"));
	        // Verifica se la cartella esiste già
	        if (!directory.exists()) {
	            // Creazione della cartella
	            boolean success = directory.mkdirs();
	            
	            if (success) {
	                System.out.println("Cartella dist creata con successo.");
	            } else {
	                System.out.println("Impossibile creare la cartella dist.");
	            }
	        } else {
	            System.out.println("La cartella dist esiste già.");
	        }		
			
			//dal path del file estraggo solo il nome del file exploit
	        nameFileExploit = exploit.getPathFile().substring(exploit.getPathFile().lastIndexOf("/")+1);
	        //devo creare un file vuoto nella cartella webapp di Tomcat per scriverci dentro l'exploit che prelevo dal db
			//I FILE EXPLOIT VANNO INSERITI NELLA CARTELLA dist
	        fileExploit = new File(getServletContext().getRealPath("/dist/"), nameFileExploit);
	        if (fileExploit.exists())
	            System.out.println("Il file " + exploit.getPathFile() + " esiste");
	        else if(fileExploit.createNewFile()) {
	        	System.out.println(exploit.getFileEXE());
	        	
	        	//CARICARE IL FILE DAL DATABASE E SCRIVO NEL FILE (fileExloit) CREATO NELLA CARTELLA webapp/dist
	        	exploit = eDAO.getExploitByIdWithFile(idExploit, fileExploit);  	
	        	
	        	//FileUtils.copyFile(exploit.getFileEXE(), fileExploit);
	        	System.out.println("Il file " + exploit.getPathFile() + " è stato creato");
	        }
	        else
	            System.out.println("Il file " + exploit.getPathFile()  + " non può essere creato");
	        
	        //*** LAVORA SUL FILE SIGNATURE
	        
	        //CREO LA CARTELLA sign SE NON ESISTE. NELLA CARTELLA sign SONO CARICATI I FILE CON LE FIRME DEL MALWARE
			File directory2 = new File(getServletContext().getRealPath("/sign/"));
	        // Verifica se la cartella esiste già
	        if (!directory2.exists()) {
	            // Creazione della cartella
	            boolean success = directory2.mkdirs();
	            
	            if (success) {
	                System.out.println("Cartella sign creata con successo.");
	            } else {
	                System.out.println("Impossibile creare la cartella sign.");
	            }
	        } else {
	            System.out.println("La cartella sign esiste già.");
	        }
	        
	        
	        //dal path del file estraggo solo il nome del file signature
	        nameFileSignature = signature.getPathFile().substring(signature.getPathFile().lastIndexOf("/")+1);
	        System.out.println(nameFileSignature);
	        
	        //TUTTI I FILE signature VANNO NELLA CARTELLA sign
	        fileSignature = new File(getServletContext().getRealPath("/sign/"),nameFileSignature);
	        if (fileSignature.exists())
	            System.out.println("Il file " + signature.getPathFile() + " esiste");
	        else if(fileSignature.createNewFile()) {
	        	
	        	//CARICARE IL FILE DAL DATABASE
	        	signature = msDAO.getSignatureByIdWithFile(idSignature, fileSignature);  	
	        	
	        	System.out.println("Il file " + signature.getPathFile() + " è stato creato");
	        }
	        else
	            System.out.println("Il file " + signature.getPathFile()  + " non può essere creato");
	        
	        
		} catch (IOException e) {
	        e.printStackTrace();
	    }  
	             
		String target = "";
		String payload = "";
		
		//PER LAVORARE BENE CON INJECTOEXE.PY IL PAYLOAD DEVE SEMPRE ESSERE LA VULNERABILITA' SE HO 2 FILE .EXE
		//VERIFICARE IL TIPO DI FILE
		if(signaturePath.contains(".txt")) {
			payload = signaturePath;
			target = exploitPath;		
		}
		else {
			payload = exploitPath;
			target = signaturePath;
		}
		
		
		System.out.println("STO PER LANCIARE PYTHON:");
	
			
		//CREA IL MOD.EXE IN WEBAPP
/*		String command = "python "+ fullPath + "injectToExe.py -t "+ fullPath + target + " -p " + fullPath + payload;
		System.out.println("command: " + command);
						
		//IL FILE EXE VIENE CREATO IN webapp
		Process p = Runtime.getRuntime().exec(command); //***IN JAVA 18 E' DEPRECATO***
		System.out.println(p.toString());
		
	    try {
			p.waitFor();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}	
*/		
	    
		//****Runtime.getRuntime().exec(command) IN JAVA 18 E' STATO DEPRECATO QUINDI BISOGNA USARE ProcessBuilder 
		/* COME USARE ProcessBuilder:
		ProcessBuilder probuilder = new ProcessBuilder( "script.py", "run", "-arg1", "val1", "-arg2", "val2" , "-arg3" , "val_31", "val_32");
		*/
		
	//PER SISTEMI WINDOWS
		String targetPython = "\"" + fullPath + target.replace("/", "\\") + "\""; 
		String payloadPython = "\"" + fullPath + payload.replace("/", "\\") + "\"";
		String injectToExe = "\"" + fullPath + "injectToExe.py\"";
		
		System.out.println("TARGETPAYTHON: " + targetPython);
		System.out.println("PAYLOADPYTHON: " + payloadPython);
		System.out.println("INJ: " + injectToExe);
		//CREO UN PROCESSO DEL SISTEMA OPERATIVO (E' IMPORTANTE CHE PYTHON SIA INSTALLATO NEL SO DOVE ESEGUIAMO L'APPLICAZIONE)
		//costruire il comando python ricordando che il passaggio degli argomenti avviene come chiave e valore (esempio -t è la chiave e fullPath + target è il valore dell'argomento)
		ProcessBuilder pb = new ProcessBuilder("python", injectToExe, "-t", targetPython, "-p", payloadPython);
		System.out.println(pb.command());
		Process p2 = pb.start();
		
/*		
	//PER SISTEMI LINUX	
		ProcessBuilder pb = new ProcessBuilder("python3", fullPath + "injectToExe.py", "-t", fullPath + target, "-p", fullPath + payload);
		System.out.println(pb.command());
		Process p2 = pb.start();
*/		
		
		
		
		try {
			p2.waitFor(); //attende che il subprocess sia completato
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
//		while(p2.isAlive());
//		
		System.out.println(p2);
		System.out.println("P2 è FINITO");
		//STAMPO IL RISULTATO DELLO SCRIPT PYTHON
		BufferedReader bfr = new BufferedReader(new InputStreamReader(p2.getInputStream()));
		String line = "";
		while ((line = bfr.readLine()) != null) {
			System.out.println(line);
		}
		//System.out.println(p2);
	    
		bfr = new BufferedReader(new InputStreamReader(p2.getErrorStream()));
		line = "";
		while ((line = bfr.readLine()) != null) {
			System.out.println(line);
		}
		
//		bfr = new BufferedReader(new OutputStream(p2.getOutputStream());
//		line = "";
//		while ((line = bfr.readLine()) != null) {
//			System.out.println(line);
//		}
//		
		
	    
	    File f = new File(getServletContext().getRealPath("") + target.replace(".exe", "_mod.exe"));
	 // Creazione dell'oggetto File per il nuovo nome del file
     //   File fdest = new File(f.getParent(), nameFileExploit.replace(".exe", "_mod.exe"));
	    File fdest = new File(getServletContext().getRealPath("/mod_EXE/"), nameFileExploit.replace(".exe", "_mod.exe"));
	    
	    File directory = new File(getServletContext().getRealPath("/mod_EXE/"));
        // Verifica se la cartella esiste già
        if (!directory.exists()) {
            // Creazione della cartella
            boolean success = directory.mkdirs();
            
            if (success) {
                System.out.println("Cartella creata con successo.");
            } else {
                System.out.println("Impossibile creare la cartella.");
            }
        } else {
            System.out.println("La cartella esiste già.");
        }
    
	    
	    
     // Verifica se il file originale esiste
        if (f.exists()) {
            // Rinomina il file
        	boolean success = f.renameTo(fdest);
        	System.out.println("success??? " + success);
		
        	if (success) {
                System.out.println("File rinominato con successo.");
                
            } else {
                System.out.println("Impossibile rinominare il file.");
            }
        } else {
            System.out.println("Il file non esiste.");
        }
	    
		//DOPO AVER CREATO L'EXE POSSO ANCHE CANCELLARE I FILE INSERITI FISICAMENTE NELLA CARTELLA WEBAPP
		
		
		// INVIARE ALLA SERVLET L'URL DELLA RISORSA CREATA
     	String url = "mod_EXE/" + fdest.getName();   //exploitPath.replace(".exe", "") + "_mod.exe";
     	System.out.println("URL FINALE: " + url);
     // String escaped = url.replace("\\", "\\\\");     	
     //	System.out.println("ESCAPED: " + escaped);
        	
     	System.out.println("nome file: " + nameFileExploit);
     	
     	//GESTIRE MESSAGGI DI ERRORE
     	String messaggio = "File EXE creato! Il download si avvierà tra qualche istante";
	
		//String result = "{\"result\":true,\"url\":\""+ url.replace("\\", "\\\\") +"\",\"messaggio\":\"" +messaggio+ "\",\"nomefile\":\""+nameFileExploit+"\"}";
		
		String result = "{\"result\":true,\"url\":\""+ url +"\",\"messaggio\":\"" +messaggio+ "\",\"nomefile\":\""+nameFileExploit+"\"}";
		System.out.println("result: " + result);
		
		JSONObject m = null;
		try {
			 m = new JSONObject(result);
			System.out.println("mess: " +m.toString());
		} catch (JSONException e) {
			e.printStackTrace();
		}
		
		System.out.println("invio: " + m.toString());
		
		response.setContentType("text/plain");
		response.setCharacterEncoding("UTF-8");
		response.getWriter().write(m.toString());
		
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
