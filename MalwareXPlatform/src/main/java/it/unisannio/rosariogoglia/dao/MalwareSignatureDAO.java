package it.unisannio.rosariogoglia.dao;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import it.unisannio.rosariogoglia.databaseUtil.DatabaseUtil;
import it.unisannio.rosariogoglia.model.MalwareSignature;

public class MalwareSignatureDAO {
	
	
	Logger logger = Logger.getLogger(MalwareSignatureDAO.class);
	
	public List<MalwareSignature> getMalwareSignature(){
		
		logger.debug("in getMalwareSignature");
		List<MalwareSignature> listaSignature = new ArrayList<MalwareSignature>();
		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			connection = DatabaseUtil.getConnection();
			String query = "SELECT * FROM malware_signature ORDER BY signature ASC";
			pstmt = connection.prepareStatement(query);
			logger.debug("Select Query: " + query);
			rs = pstmt.executeQuery(query);
						
			while(rs.next()){
				MalwareSignature signature = new MalwareSignature();
				signature.setIdSignature(rs.getInt("idsignature"));
				signature.setSignature(rs.getString("signature"));
				signature.setPathSignature(rs.getString("path_file"));
				//aggiungere il file intero
				
				logger.debug("(" + signature.getIdSignature() + ", " + signature.getSignature() + signature.getPathSignature() + ")");
				
				listaSignature.add(signature);
			}		
			
		} catch (SQLException  e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{
			try {
				if(rs != null) {
					rs.close();
					}
					
				if(pstmt != null) {
					pstmt.close();
					}
					
				if(connection != null) {
					connection.close();
					}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return listaSignature;
		
	}
	
	public MalwareSignature getMalwareSignatureById(Integer idSignature) {
		logger.debug("in getMalwareSignatureById");
		MalwareSignature signature = null;
		
		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {

			connection = DatabaseUtil.getConnection();
			
			String sql = "SELECT * FROM malware_signature WHERE (idsignature = ?)";
			pstmt = connection.prepareStatement(sql);
			
			pstmt.setInt(1, idSignature);
			logger.debug("Select Query:" + pstmt.toString());
			rs = pstmt.executeQuery();
			if (rs.next()){
				
				signature = new MalwareSignature();
				signature.setIdSignature(rs.getInt("idsignature"));
				signature.setSignature(rs.getString("signature"));
				signature.setPathSignature(rs.getString("path_file"));
				
			}
						
		} catch (SQLException  e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{
			try {
				if(rs != null) {
					rs.close();
					}
					
				if(pstmt != null) {
					pstmt.close();
					}
					
				if(connection != null) {
					connection.close();
					}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return signature;
	
	}
	
	
	
	
	

}
