package it.unisannio.rosariogoglia.dao;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.apache.log4j.Logger;

import it.unisannio.rosariogoglia.databaseUtil.DatabaseUtil;
import it.unisannio.rosariogoglia.model.Exploit;
import it.unisannio.rosariogoglia.model.MalwareSignature;

public class MalwareSignatureDAO {
	
	
	Logger logger = Logger.getLogger(MalwareSignatureDAO.class);
	
	public List<MalwareSignature> getMalwareSignature(){
		
		logger.debug("in getMalwareSignature");
		List<MalwareSignature> listaSignature = new ArrayList<MalwareSignature>();
		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			connection = DatabaseUtil.getConnection();
			String query = "SELECT * FROM malware_signature ORDER BY signature ASC";
			pstmt = connection.prepareStatement(query);
			logger.debug("Select Query: " + query);
			rs = pstmt.executeQuery(query);
						
			while(rs.next()){
				MalwareSignature signature = new MalwareSignature();
				signature.setIdSignature(rs.getInt("idsignature"));
				signature.setSignature(rs.getString("signature"));
				signature.setPathFile(rs.getString("path_file"));
				//aggiungere il file intero
				
				logger.debug("(" + signature.getIdSignature() + ", " + signature.getSignature() + signature.getPathFile() + ")");
				
				listaSignature.add(signature);
			}		
			
		} catch (SQLException  e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{
			try {
				if(rs != null) {
					rs.close();
					}
					
				if(pstmt != null) {
					pstmt.close();
					}
					
				if(connection != null) {
					connection.close();
					}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return listaSignature;
		
	}
	
	public MalwareSignature getMalwareSignatureById(Integer idSignature) {
		logger.debug("in getMalwareSignatureById");
		MalwareSignature signature = null;
		
		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {

			connection = DatabaseUtil.getConnection();
			
			String sql = "SELECT * FROM malware_signature WHERE (idsignature = ?)";
			pstmt = connection.prepareStatement(sql);
			
			pstmt.setInt(1, idSignature);
			logger.debug("Select Query:" + pstmt.toString());
			rs = pstmt.executeQuery();
			if (rs.next()){
				
				signature = new MalwareSignature();
				signature.setIdSignature(rs.getInt("idsignature"));
				signature.setSignature(rs.getString("signature"));
				signature.setPathFile(rs.getString("path_file"));
				
			}
						
		} catch (SQLException  e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{
			try {
				if(rs != null) {
					rs.close();
					}
					
				if(pstmt != null) {
					pstmt.close();
					}
					
				if(connection != null) {
					connection.close();
					}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return signature;
	
	}
	
	
	//PASSARE IL FILE COME PARAMETRO
	public MalwareSignature getSignatureByIdWithFile(Integer idSignature, File file) {
			logger.debug("in getSignatureByIdWithFile");
			MalwareSignature signature = null;
			
			Connection connection = null;
			PreparedStatement pstmt = null;
			ResultSet rs = null;
			try {

				connection = DatabaseUtil.getConnection();
				
				String sql = "SELECT * FROM malware_signature WHERE (idsignature = ?)";
				pstmt = connection.prepareStatement(sql);
							
				pstmt.setInt(1, idSignature);
				logger.debug("Select Query:" + pstmt.toString());
				rs = pstmt.executeQuery();
				if (rs.next()){
					
					signature = new MalwareSignature();
					signature.setIdSignature(rs.getInt("idsignature"));
					signature.setSignature(rs.getString("signature"));
					signature.setPathFile(rs.getString("path_file"));
					
					//OTTENGO IL FILE SIGNATURE DAL DB
					Blob blob = rs.getBlob("file");
					InputStream inputStream = blob.getBinaryStream();
	                OutputStream outputStream = new FileOutputStream(file);
	                
	                int bytesRead = -1;
	                byte[] buffer = new byte[4096];
	                while ((bytesRead = inputStream.read(buffer)) != -1) {
	                    outputStream.write(buffer, 0, bytesRead);
	                }
	                inputStream.close();
	                outputStream.close();
	                
	                System.out.println("File saved");
	                
	                //il file letto dal db viene caricato nell'oggetto signature
	                signature.setFileEXE(file);				
					
				}
							
			} catch (SQLException  e) {
				e.printStackTrace();
			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			finally{
				try {
					if(rs != null) {
						rs.close();
						}
						
					if(pstmt != null) {
						pstmt.close();
						}
						
					if(connection != null) {
						connection.close();
						}
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			return signature;
		
		}
		
		
	public Integer insertMalwareSignature(MalwareSignature malwareSignature) {
		logger.debug("in insertMalwareSignature");
		Integer signatureId = -1;
		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			connection = DatabaseUtil.getConnection();
			connection.setAutoCommit(false);
						
		    String sql = "INSERT INTO malware_signature (signature, path_file, file) VALUES (?, ?, ?)";
			pstmt = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            pstmt.setString(1, malwareSignature.getSignature());
			pstmt.setString(2, malwareSignature.getPathFile());				
			//INSERIMENTO DEL FILE NEL DATABASE			
			InputStream inputStream = new FileInputStream(malwareSignature.getFileEXE());
			pstmt.setBlob(3, inputStream);
			
			logger.debug("Insert Query: " + pstmt.toString());
			
			int insertRow = pstmt.executeUpdate();
					
			if(insertRow != -1){
				rs = pstmt.getGeneratedKeys();
				if(rs.next()) {
					signatureId = rs.getInt(1);
					logger.info("Inserimento nuovo signature(" + signatureId + ")");
					malwareSignature.setIdSignature(signatureId);;
				}
	
			}
				
			connection.commit();
			
			
		} catch (Exception e) {
			System.out.println(e);
			logger.debug("Inserimento Malware Signature non riuscito!!!");
		}
		finally {
			if (connection!=null) {
				try {
					if(rs != null)
						rs.close();
						pstmt.close();
						connection.setAutoCommit(true);
						connection.close();
				} catch (SQLException  e) {
					e.printStackTrace();
				}
				logger.debug("Connection chiusa");
			}
		}			
		
		return signatureId;
		
		
		
	}
		
		
		
	
	

}
