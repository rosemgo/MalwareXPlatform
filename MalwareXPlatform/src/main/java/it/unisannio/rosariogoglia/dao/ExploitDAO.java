package it.unisannio.rosariogoglia.dao;

import java.io.IOException;
import java.sql.Blob;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.io.InputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;


import org.apache.log4j.Logger;
import java.io.InputStream;
import java.io.OutputStream;

import it.unisannio.rosariogoglia.databaseUtil.DatabaseUtil;
import it.unisannio.rosariogoglia.model.Exploit;


public class ExploitDAO {
	
	Logger logger = Logger.getLogger(ExploitDAO.class);
	
	public List<Exploit> getExploit(){
		
		logger.debug("in getExploit");
		List<Exploit> listaExploit = new ArrayList<Exploit>();
		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			connection = DatabaseUtil.getConnection();
			String query = "SELECT idexploit, name_exploit, path_file FROM exploit ORDER BY name_exploit ASC";
			pstmt = connection.prepareStatement(query);
			logger.debug("Select Query: " + query);
			rs = pstmt.executeQuery(query);
						
			while(rs.next()){
				Exploit exploit = new Exploit();
				exploit.setIdExploit(rs.getInt("idexploit"));
				exploit.setExploit(rs.getString("name_exploit"));
				exploit.setPathFile(rs.getString("path_file"));
								
				logger.debug("(" + exploit.getIdExploit() + ", " + exploit.getExploit() + exploit.getPathFile() + ")");
				
				listaExploit.add(exploit);
			}		
			
		} catch (SQLException  e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{
			try {
				if(rs != null) {
					rs.close();
					}
					
				if(pstmt != null) {
					pstmt.close();
					}
					
				if(connection != null) {
					connection.close();
					}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return listaExploit;
		
	}
	
	public Exploit getExploitById(Integer idExploit) {
		logger.debug("in getExploitById");
		Exploit exploit = null;
		
		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {

			connection = DatabaseUtil.getConnection();
			
			String sql = "SELECT idexploit, name_exploit, path_file FROM exploit WHERE (idexploit = ?)";
			pstmt = connection.prepareStatement(sql);
			
			pstmt.setInt(1, idExploit);
			logger.debug("Select Query:" + pstmt.toString());
			rs = pstmt.executeQuery();
			if (rs.next()){
				
				exploit = new Exploit();
				exploit.setIdExploit(rs.getInt("idexploit"));
				exploit.setExploit(rs.getString("name_exploit"));
				exploit.setPathFile(rs.getString("path_file"));
				
			}
						
		} catch (SQLException  e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{
			try {
				if(rs != null) {
					rs.close();
					}
					
				if(pstmt != null) {
					pstmt.close();
					}
					
				if(connection != null) {
					connection.close();
					}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return exploit;
	
	}
	
	
	//PASSARE IL FILE COME PARAMETRO
	/*E' necessario passare come parametro il file in cui fisicamente si andrà a scrivere il blob caricato dal databse. 
	Il blob letto dal database deve essere scritto in un file che fisicamente va creato sul filesystem, in questo caso viene creato nella cartella webapp 
	*/
	public Exploit getExploitByIdWithFile(Integer idExploit, File file) {
		logger.debug("in getExploitByIdWithFile");
		Exploit exploit = null;
		
		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {

			connection = DatabaseUtil.getConnection();
			
			String sql = "SELECT * FROM exploit WHERE (idexploit = ?)";
			pstmt = connection.prepareStatement(sql);
			
			pstmt.setInt(1, idExploit);
			logger.debug("Select Query:" + pstmt.toString());
			rs = pstmt.executeQuery();
			if (rs.next()){
				
				exploit = new Exploit();
				exploit.setIdExploit(rs.getInt("idexploit"));
				exploit.setExploit(rs.getString("name_exploit"));
				exploit.setPathFile(rs.getString("path_file"));
				
		/*		File file = exploit.getFileEXE();
                try (FileOutputStream fos = new FileOutputStream(image)) {
                    byte[] buffer = new byte[1024];

                    // Get the binary stream of our BLOB data
                    InputStream is = rs.getBinaryStream("image");
                    while (is.read(buffer) > 0) {
                        fos.write(buffer);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
			*/	
				
				
				Blob blob = rs.getBlob("file");
				InputStream inputStream = blob.getBinaryStream();
                //in questo modo scrivo il contenuto del blob letto dal database nel file creato sul filesystem nella cartella webapp
				OutputStream outputStream = new FileOutputStream(file);
                
                int bytesRead = -1;
                byte[] buffer = new byte[4096];
                while ((bytesRead = inputStream.read(buffer)) != -1) {
                    outputStream.write(buffer, 0, bytesRead);
                }
                inputStream.close();
                outputStream.close();
                
                System.out.println("File saved");
                
                exploit.setFileEXE(file);				
				
			}
						
		} catch (SQLException  e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{
			try {
				if(rs != null) {
					rs.close();
					}
					
				if(pstmt != null) {
					pstmt.close();
					}
					
				if(connection != null) {
					connection.close();
					}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return exploit;
	
	}
	
	
	
	public Integer insertExploit(Exploit exploit) {
		logger.debug("in insertExploit");
		Integer exploitId = -1;
		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			connection = DatabaseUtil.getConnection();
			connection.setAutoCommit(false);
			
			
		    String sql = "INSERT INTO exploit (name_exploit, path_file, file) VALUES (?, ?, ?)";
			pstmt = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            pstmt.setString(1, exploit.getExploit());
			pstmt.setString(2, exploit.getPathFile());				
			//INSERIMENTO DEL FILE NEL DATABASE			
			InputStream inputStream = new FileInputStream(exploit.getFileEXE());
			pstmt.setBlob(3, inputStream);
			
			logger.debug("Insert Query: " + pstmt.toString());
			
			int insertRow = pstmt.executeUpdate();
					
			if(insertRow != -1){
				rs = pstmt.getGeneratedKeys();
				if(rs.next()) {
					exploitId = rs.getInt(1);
					logger.info("Inserimento nuovo exploit (" + exploitId + ")");
					exploit.setIdExploit(exploitId);
				}
	
			}
				
			connection.commit();
			
			
		} catch (Exception e) {
			System.out.println(e);
			logger.debug("Inserimento Exploit non riuscito!!!");
		}
		finally {
			if (connection!=null) {
				try {
					if(rs != null)
						rs.close();
						pstmt.close();
						connection.setAutoCommit(true);
						connection.close();
				} catch (SQLException  e) {
					e.printStackTrace();
				}
				logger.debug("Connection chiusa");
			}
		}			
		
		return exploitId;
		
	}

}
