package it.unisannio.rosariogoglia.dao;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.io.InputStream;
import java.io.FileInputStream;
import org.apache.log4j.Logger;

import it.unisannio.rosariogoglia.databaseUtil.DatabaseUtil;
import it.unisannio.rosariogoglia.model.Exploit;


public class ExploitDAO {
	
	Logger logger = Logger.getLogger(ExploitDAO.class);
	
	public List<Exploit> getExploit(){
		
		logger.debug("in getExploit");
		List<Exploit> listaExploit = new ArrayList<Exploit>();
		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			connection = DatabaseUtil.getConnection();
			String query = "SELECT * FROM exploit ORDER BY name_exploit ASC";
			pstmt = connection.prepareStatement(query);
			logger.debug("Select Query: " + query);
			rs = pstmt.executeQuery(query);
						
			while(rs.next()){
				Exploit exploit = new Exploit();
				exploit.setIdExploit(rs.getInt("idexploit"));
				exploit.setExploit(rs.getString("name_exploit"));
				exploit.setPathFile(rs.getString("path_file"));
				//aggiungere il file intero
				
				logger.debug("(" + exploit.getIdExploit() + ", " + exploit.getExploit() + exploit.getPathFile() + ")");
				
				listaExploit.add(exploit);
			}		
			
		} catch (SQLException  e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{
			try {
				if(rs != null) {
					rs.close();
					}
					
				if(pstmt != null) {
					pstmt.close();
					}
					
				if(connection != null) {
					connection.close();
					}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return listaExploit;
		
	}
	
	public Exploit getExploitById(Integer idExploit) {
		logger.debug("in getExploitById");
		Exploit exploit = null;
		
		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {

			connection = DatabaseUtil.getConnection();
			
			String sql = "SELECT * FROM exploit WHERE (idexploit = ?)";
			pstmt = connection.prepareStatement(sql);
			
			pstmt.setInt(1, idExploit);
			logger.debug("Select Query:" + pstmt.toString());
			rs = pstmt.executeQuery();
			if (rs.next()){
				
				exploit = new Exploit();
				exploit.setIdExploit(rs.getInt("idexploit"));
				exploit.setExploit(rs.getString("name_exploit"));
				exploit.setPathFile(rs.getString("path_file"));
				
			}
						
		} catch (SQLException  e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally{
			try {
				if(rs != null) {
					rs.close();
					}
					
				if(pstmt != null) {
					pstmt.close();
					}
					
				if(connection != null) {
					connection.close();
					}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return exploit;
	
	}
	
	public Integer insertExploit(Exploit exploit) {
		logger.debug("in insertExploit");
		Integer exploitId = -1;
		Connection connection = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try {
			connection = DatabaseUtil.getConnection();
			connection.setAutoCommit(false);
			
			
		    String sql = "INSERT INTO exploit (name_exploit, path_file, file) VALUES (?, ?, ?)";
			pstmt = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            pstmt.setString(1, exploit.getExploit());
			pstmt.setString(2, exploit.getPathFile());				
			//INSERIMENTO DEL FILE NEL DATABASE			
			InputStream inputStream = new FileInputStream(exploit.getFileEXE());
			pstmt.setBlob(3, inputStream);
			
			logger.debug("Insert Query: " + pstmt.toString());
			
			int insertRow = pstmt.executeUpdate();
					
			if(insertRow != -1){
				rs = pstmt.getGeneratedKeys();
				if(rs.next()) {
					exploitId = rs.getInt(1);
					logger.info("Inserimento nuovo exploit (" + exploitId + ")");
					exploit.setIdExploit(exploitId);
				}
	
			}
				
			connection.commit();
			
			
		} catch (Exception e) {
			System.out.println(e);
			logger.debug("Inserimento Exploit non riuscito!!!");
		}
		finally {
			if (connection!=null) {
				try {
					if(rs != null)
						rs.close();
						pstmt.close();
						connection.setAutoCommit(true);
						connection.close();
				} catch (SQLException  e) {
					e.printStackTrace();
				}
				logger.debug("Connection chiusa");
			}
		}			
		
		return exploitId;
		
	}

}
